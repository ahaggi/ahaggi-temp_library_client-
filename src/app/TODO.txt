const _ReaderWhereUniqueInput = inputObjectType({
    name: "_ReaderWhereUniqueInput",
    definition(t) {
        t.string("id")
        t.string("email")
                            t.string("phone")
    }
});


update after mutation:
  updating-after-a-mutation
  https://www.apollographql.com/docs/angular/features/cache-updates/#updating-after-a-mutation

  define a custom merge function for * field, so InMemoryCache can safely merge these objects
    https://stackoverflow.com/a/63167679   
    https://www.apollographql.com/docs/angular/basics/caching/#inmemorycache


Read 
  We don’t want to build our own spinner into the existing button. Much more we want to use the already existing MatProgressSpinner component from the Angular Library. 
  https://medium.com/coyo-tech/how-to-add-a-loading-state-to-angular-material-buttons-f0c3272e49a

  Dynamic component loading
  https://angular.io/guide/dynamic-component-loader



fix ==>  style un-returned book at http://localhost:4211/book

create universal filterPlaceHolder!!



In all of the components 
    @Input()  payload : it spouse to be accessed just in ngOnChanges, instead of accessing its value at other places and the template.
    for example take a look at how the flwg components uses payload:
        -"SharedPaginatedCardsComponent"    OK
        -"SharedListSelectComponent"        Not-OK



spinner på alt

app-shared-filtered-select => show err ifExist onSubmit

try soft delete booksToReaders?

// imgUri: [''], imageUri controller to emulate image's change functionality

routerlink to be routerlink ["something" , "something"] instead of ["something/${id}"]

add this.isLoadingFailed To:
                    BookComponent
                    ReaderComponent
                    AuthorComponent


Handling Apollo Errs
      .pipe(
      // you can also merge loading assignment into map        
      tap(result => this.isLoading = result.loading),
      filter(result => !result.loading),           
      map(result => (<any>result.data).whateveryourwhattoshow),
      catchError(err => {
          // whatever you want to handle error 
          if (err.graphQLErrors) {      
              err.graphQLErrors.forEach(e => {...});    
          }    
          if (err.networkError) { ... }
          // default return    return of([]);
      })
      )
